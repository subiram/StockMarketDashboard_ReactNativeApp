{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUsername, setPassword, setCaptcha, setInputCaptcha, setErrorMessage } from \"./authActions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var authState = useSelector(function (state) {\n    return state.auth;\n  });\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    captcha = _useState2[0],\n    setCaptcha = _useState2[1];\n  useEffect(function () {\n    generateCaptcha();\n  }, []);\n  var generateCaptcha = function generateCaptcha() {\n    var randomCaptcha = Math.floor(1000 + Math.random() * 9000);\n    setCaptcha(randomCaptcha.toString());\n  };\n  var handleLogin = function handleLogin() {\n    var username = authState.username,\n      password = authState.password,\n      inputCaptcha = authState.inputCaptcha,\n      captcha = authState.captcha;\n    if (username === \"admin\" && password === \"qwerty123\" && inputCaptcha === captcha) {\n      console.log(\"Authenticated User!\");\n      navigation.navigate(\"Dashboard\");\n    } else {\n      dispatch(setErrorMessage(\"Invalid credentials. Please try again.\"));\n    }\n  };\n  var handleSignup = function handleSignup() {\n    navigation.navigate(\"Signup\");\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.card,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Login\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Username\",\n        onChangeText: function onChangeText(text) {\n          return setUsername(text);\n        }\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Password\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        }\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: `Captcha: ${captcha}`,\n        onChangeText: function onChangeText(text) {\n          return setInputCaptcha(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        style: styles.loginButton,\n        onPress: handleLogin,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Login\"\n        })\n      }), authState.errorMessage ? _jsx(Text, {\n        style: styles.errorText,\n        children: authState.errorMessage\n      }) : null, _jsx(TouchableOpacity, {\n        style: styles.signupButton,\n        onPress: handleSignup,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Signup\"\n        })\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  card: {\n    backgroundColor: \"#fff\",\n    borderRadius: 10,\n    padding: 20,\n    alignItems: \"center\",\n    elevation: 3,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 2\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 16\n  },\n  input: {\n    width: \"80%\",\n    height: 40,\n    borderColor: \"gray\",\n    borderWidth: 1,\n    marginBottom: 16,\n    paddingHorizontal: 8\n  },\n  loginButton: {\n    backgroundColor: \"#3498db\",\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  },\n  buttonText: {\n    color: \"#fff\",\n    textAlign: \"center\"\n  },\n  errorText: {\n    color: \"red\",\n    marginTop: 10\n  },\n  signupButton: {\n    backgroundColor: \"#2ecc71\",\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","StyleSheet","useDispatch","useSelector","setUsername","setPassword","setCaptcha","setInputCaptcha","setErrorMessage","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","dispatch","authState","state","auth","_useState","_useState2","_slicedToArray","captcha","generateCaptcha","randomCaptcha","Math","floor","random","toString","handleLogin","username","password","inputCaptcha","console","log","navigate","handleSignup","style","styles","container","children","card","title","input","placeholder","onChangeText","text","secureTextEntry","loginButton","onPress","buttonText","errorMessage","errorText","signupButton","create","flex","justifyContent","alignItems","backgroundColor","borderRadius","padding","elevation","shadowOffset","width","height","shadowOpacity","shadowRadius","fontSize","marginBottom","borderColor","borderWidth","paddingHorizontal","marginTop","color","textAlign"],"sources":["C:/Users/localadmin/Downloads/AFSD/StockMarketDashboard/LoginScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n} from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setUsername,\r\n  setPassword,\r\n  setCaptcha,\r\n  setInputCaptcha,\r\n  setErrorMessage,\r\n} from \"./authActions\";\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const dispatch = useDispatch();\r\n  const authState = useSelector((state) => state.auth);\r\n  const [captcha, setCaptcha] = useState('');\r\n\r\n  useEffect(() => {\r\n    generateCaptcha();\r\n  }, []);  \r\n\r\n  // Generate a random 4-digit captcha\r\n  const generateCaptcha = () => {\r\n    const randomCaptcha = Math.floor(1000 + Math.random() * 9000);\r\n    setCaptcha(randomCaptcha.toString());\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    // Access the state using authState\r\n    const { username, password, inputCaptcha, captcha } = authState;\r\n\r\n    // Check if the credentials and captcha are valid\r\n    if (\r\n      username === \"admin\" &&\r\n      password === \"qwerty123\" &&\r\n      inputCaptcha === captcha\r\n    ) {\r\n      // Navigate to the dashboard\r\n      console.log(\"Authenticated User!\");\r\n      navigation.navigate(\"Dashboard\");\r\n    } else {\r\n      // Display an error message for invalid credentials\r\n      dispatch(setErrorMessage(\"Invalid credentials. Please try again.\"));\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    navigation.navigate(\"Signup\");\r\n  };\r\n\r\n  // ... rest of the component\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.card}>\r\n        <Text style={styles.title}>Login</Text>\r\n\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Username\"\r\n          onChangeText={(text) => setUsername(text)}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Password\"\r\n          secureTextEntry\r\n          onChangeText={(text) => setPassword(text)}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder={`Captcha: ${captcha}`}\r\n          onChangeText={(text) => setInputCaptcha(text)}\r\n        />\r\n\r\n        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>\r\n          <Text style={styles.buttonText}>Login</Text>\r\n        </TouchableOpacity>\r\n\r\n        {authState.errorMessage ? (\r\n          <Text style={styles.errorText}>{authState.errorMessage}</Text>\r\n        ) : null}\r\n      <TouchableOpacity style={styles.signupButton} onPress={handleSignup}>\r\n        <Text style={styles.buttonText}>Signup</Text>\r\n      </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 10,\r\n    padding: 20,\r\n    alignItems: \"center\",\r\n    elevation: 3, // for Android 3D effect\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.2,\r\n    shadowRadius: 2,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    marginBottom: 16,\r\n  },\r\n  input: {\r\n    width: \"80%\",\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    marginBottom: 16,\r\n    paddingHorizontal: 8,\r\n  },\r\n  loginButton: {\r\n    backgroundColor: \"#3498db\",\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    textAlign: \"center\",\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n    marginTop: 10,\r\n  },\r\n  signupButton: {\r\n    backgroundColor: \"#2ecc71\",\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n\r\n// // LoginScreen.js\r\n\r\n// import React from 'react';\r\n// import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import {\r\n//   setUsername,\r\n//   setPassword,\r\n//   setCaptcha,\r\n//   setInputCaptcha,\r\n//   setErrorMessage,\r\n// } from './authActions';\r\n\r\n// const LoginScreen = ({ navigation }) => {\r\n//   const dispatch = useDispatch();\r\n//   const authState = useSelector((state) => state.auth);\r\n\r\n//   // ... existing code remains the same\r\n\r\n//   const handleSignup = () => {\r\n//     navigation.navigate('Signup');\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       {/* ... existing code remains the same */}\r\n//       <TouchableOpacity style={styles.signupButton} onPress={handleSignup}>\r\n//         <Text style={styles.buttonText}>Signup</Text>\r\n//       </TouchableOpacity>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   // ... existing styles remain the same\r\n//   signupButton: {\r\n//     backgroundColor: '#2ecc71',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     marginTop: 10,\r\n//   },\r\n// });\r\n\r\n// export default LoginScreen;\r\n\r\n// // LoginScreen.js\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\n\r\n// const LoginScreen = ({ navigation }) => {\r\n//   const [username, setUsername] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [captcha, setCaptcha] = useState('');\r\n//   const [inputCaptcha, setInputCaptcha] = useState('');\r\n//   const [errorMessage, setErrorMessage] = useState('');\r\n\r\n//   // Generate a random 4-digit captcha\r\n//   const generateCaptcha = () => {\r\n//     const randomCaptcha = Math.floor(1000 + Math.random() * 9000);\r\n//     setCaptcha(randomCaptcha.toString());\r\n//   };\r\n\r\n//   const handleLogin = () => {\r\n//     // Check if the credentials and captcha are valid\r\n//     if (username === 'yourUsername' && password === 'yourPassword' && inputCaptcha === captcha) {\r\n//       // Navigate to the dashboard\r\n//       navigation.navigate('Dashboard');\r\n//     } else {\r\n//       // Display an error message for invalid credentials\r\n//       setErrorMessage('Invalid credentials. Please try again.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={styles.card}>\r\n//         <Text style={styles.title}>Login</Text>\r\n\r\n//         <TextInput\r\n//           style={styles.input}\r\n//           placeholder=\"Username\"\r\n//           onChangeText={(text) => setUsername(text)}\r\n//         />\r\n//         <TextInput\r\n//           style={styles.input}\r\n//           placeholder=\"Password\"\r\n//           secureTextEntry\r\n//           onChangeText={(text) => setPassword(text)}\r\n//         />\r\n//         <TextInput\r\n//           style={styles.input}\r\n//           placeholder={`Captcha: ${captcha}`}\r\n//           onChangeText={(text) => setInputCaptcha(text)}\r\n//         />\r\n\r\n//         <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>\r\n//           <Text style={styles.buttonText}>Login</Text>\r\n//         </TouchableOpacity>\r\n\r\n//         {errorMessage ? <Text style={styles.errorText}>{errorMessage}</Text> : null}\r\n//       </View>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   card: {\r\n//     backgroundColor: '#fff',\r\n//     borderRadius: 10,\r\n//     padding: 20,\r\n//     alignItems: 'center',\r\n//     elevation: 3, // for Android 3D effect\r\n//     shadowOffset: { width: 0, height: 2 },\r\n//     shadowOpacity: 0.2,\r\n//     shadowRadius: 2,\r\n//   },\r\n//   title: {\r\n//     fontSize: 24,\r\n//     marginBottom: 16,\r\n//   },\r\n//   input: {\r\n//     width: '80%',\r\n//     height: 40,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 16,\r\n//     paddingHorizontal: 8,\r\n//   },\r\n//   loginButton: {\r\n//     backgroundColor: '#3498db',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     marginTop: 10,\r\n//   },\r\n//   buttonText: {\r\n//     color: '#fff',\r\n//     textAlign: 'center',\r\n//   },\r\n//   errorText: {\r\n//     color: 'red',\r\n//     marginTop: 10,\r\n//   },\r\n// });\r\n\r\n// export default LoginScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}