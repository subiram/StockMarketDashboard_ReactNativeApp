{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSignupUsername, setSignupEmail, setSignupPassword, setSignupErrorMessage } from \"./authActions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SignupScreen = function SignupScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var authState = useSelector(function (state) {\n    return state.auth;\n  });\n  var handleRegister = function handleRegister() {\n    var signupUsername = authState.signupUsername,\n      signupEmail = authState.signupEmail,\n      signupPassword = authState.signupPassword;\n    if (!signupUsername || !signupEmail || !signupPassword) {\n      dispatch(setSignupErrorMessage('All fields are mandatory.'));\n    } else if (!/^[a-zA-Z0-9_]+$/.test(signupUsername)) {\n      dispatch(setSignupErrorMessage('Username should be alphanumeric with underscores and no spaces.'));\n    } else if (!/^\\S+@\\S+\\.\\S+$/.test(signupEmail)) {\n      dispatch(setSignupErrorMessage('Invalid email address.'));\n    } else {\n      console.log('Username:', signupUsername);\n      console.log('Email:', signupEmail);\n      console.log('Password:', signupPassword);\n      dispatch(saveUserData({\n        username: signupUsername,\n        email: signupEmail,\n        password: signupPassword\n      }));\n      navigation.navigate('Login');\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Signup\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Username\",\n      onChangeText: function onChangeText(text) {\n        return dispatch(setSignupUsername(text));\n      }\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Email\",\n      onChangeText: function onChangeText(text) {\n        return dispatch(setSignupEmail(text));\n      }\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        return dispatch(setSignupPassword(text));\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.registerButton,\n      onPress: handleRegister,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Register\"\n      })\n    }), authState.signupErrorMessage ? _jsx(Text, {\n      style: styles.errorText,\n      children: authState.signupErrorMessage\n    }) : null]\n  });\n};\nvar styles = StyleSheet.create({\n  registerButton: {\n    backgroundColor: '#2ecc71',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  }\n});\nexport default SignupScreen;","map":{"version":3,"names":["React","View","Text","TextInput","TouchableOpacity","StyleSheet","useDispatch","useSelector","setSignupUsername","setSignupEmail","setSignupPassword","setSignupErrorMessage","jsx","_jsx","jsxs","_jsxs","SignupScreen","_ref","navigation","dispatch","authState","state","auth","handleRegister","signupUsername","signupEmail","signupPassword","test","console","log","saveUserData","username","email","password","navigate","style","styles","container","children","title","input","placeholder","onChangeText","text","secureTextEntry","registerButton","onPress","buttonText","signupErrorMessage","errorText","create","backgroundColor","padding","borderRadius","marginTop"],"sources":["C:/Users/localadmin/Downloads/AFSD/StockMarketDashboard/SignupScreen.js"],"sourcesContent":["// SignupScreen.js\r\n\r\nimport React from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  setSignupUsername,\r\n  setSignupEmail,\r\n  setSignupPassword,\r\n  setSignupErrorMessage,\r\n} from './authActions';\r\n\r\nconst SignupScreen = ({ navigation }) => {\r\n  const dispatch = useDispatch();\r\n  const authState = useSelector((state) => state.auth);\r\n\r\n  const handleRegister = () => {\r\n    // Access the state using authState\r\n    const { signupUsername, signupEmail, signupPassword } = authState;\r\n\r\n    // Validate the form fields\r\n    if (!signupUsername || !signupEmail || !signupPassword) {\r\n      dispatch(setSignupErrorMessage('All fields are mandatory.'));\r\n    } else if (!/^[a-zA-Z0-9_]+$/.test(signupUsername)) {\r\n      dispatch(\r\n        setSignupErrorMessage(\r\n          'Username should be alphanumeric with underscores and no spaces.'\r\n        )\r\n      );\r\n    } else if (!/^\\S+@\\S+\\.\\S+$/.test(signupEmail)) {\r\n      dispatch(setSignupErrorMessage('Invalid email address.'));\r\n    } else {\r\n      // Save the user data (you can dispatch an action to save it to Redux store or perform an API call)\r\n      // For now, let's just display the data\r\n      console.log('Username:', signupUsername);\r\n      console.log('Email:', signupEmail);\r\n      console.log('Password:', signupPassword);\r\n      dispatch(\r\n        saveUserData({\r\n          username: signupUsername,\r\n          email: signupEmail,\r\n          password: signupPassword,\r\n        })\r\n      );      \r\n\r\n      // Navigate back to the login screen\r\n      navigation.navigate('Login');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Signup</Text>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Username\"\r\n        onChangeText={(text) => dispatch(setSignupUsername(text))}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Email\"\r\n        onChangeText={(text) => dispatch(setSignupEmail(text))}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Password\"\r\n        secureTextEntry\r\n        onChangeText={(text) => dispatch(setSignupPassword(text))}\r\n      />\r\n\r\n      <TouchableOpacity style={styles.registerButton} onPress={handleRegister}>\r\n        <Text style={styles.buttonText}>Register</Text>\r\n      </TouchableOpacity>\r\n\r\n      {authState.signupErrorMessage ? (\r\n        <Text style={styles.errorText}>{authState.signupErrorMessage}</Text>\r\n      ) : null}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  // ... existing styles remain the same\r\n  registerButton: {\r\n    backgroundColor: '#2ecc71',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\nexport default SignupScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}